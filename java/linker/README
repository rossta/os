############################################################################

  Ross Kaffenberger
  N19663559
  
  Lab #1 Linker (Java version)
  Operating Systems | NYU
  9.24.09

############################################################################

1. Compilation command
  
  Unzip the archive. cd into linker/ and run the following command.
  
      $ javac @linker.src -d out      // compiles the source code
    
      $ cd out                        // before running the program.
  
2. Running Program

  Run the following command from within linker/out/:

      $ java lib/Runner ../public/input_1.txt     // runs linker for input 1
  
  All input files 1 - 9 from the we
  
  With arbitrary FILE_PATH

      $ java lib/Runner FILE_PATH

3. Directory Structure

  linker/
    - contains link.src, a list of the classes to compile.
    - linker.iml, .ipr and .iws may be ignored (generated by my Java IDE)

    src/lib/
    - contains the application classes and modules. Each lib file contains one application class or module of the name corresponding to its filename. Each of these files has a counterpart Ruby class.
    
    out/lib/
    - contains compiled classes

4. Description

  Please see the corresponding section in the README file for my Ruby version of this lab. Each Java class is a counterpart to a similarly named Ruby class. I tried to match up the primary method calls as best as possible. Hence, the description of the primary function of each class is essentially the same for this version.
  
5. Dependencies

    Java, -version 1.5.0_19 or higher